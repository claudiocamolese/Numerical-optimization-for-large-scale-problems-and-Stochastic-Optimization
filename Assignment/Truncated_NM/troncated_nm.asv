function [xk, fk, gradfk_norm, k, xseq, btseq, pcgiterseq] = ...
    troncated_nm(x0, f, gradf, Hessf, kmax, tolgrad, c1, rho, btmax,...
    fterms, cg_maxit)
%   newton method with backtrack

%   INPUT
%   x0:         starting point for the optimization method
%   f:          function handle, loss function to minimize
%   gradf:      function handle, gradient of f
%   Hessf:      function handle, Hessian of f 
%   kmax:       maximum number of iterations of the method
%   tolgrad:    tolerance with respect to the norm of the gradient in order 
%               to stop the method
%   c1:         the factor c1 for the Armijo condition
%   rho:        factor less then 1 used to reduce alpha
%   btmax:      maximum number of steps allowed to update alpha
%   fterms:     function handle charaterizing the sequence of forcing tems
%               etak
%   pcg_maxit:  maximum number of iteration allowed for the pcg solver

%   OUTPUT
%   xk:             last vector xk computed by the optimization method
%   fk:             the value of f in xk
%   gradfk_norm:    the euclidian norm of gradf in xk
%   k:              index value of the last step executed by the 
%                   optimization method before stopping
%   xseq:           a matrix/vector in Rn*k such that each collumn j is the 
%                   j-th vector generated by the optimization method
%   btseq:          row vector in Rk such that the j-th element is the 
%                   number of becktraking iterations done at the j-th step 
%                   of the descent method
%   pcgiterseq:     the number of pcg-iterations executed at each main 
%                   iteration

% INIZIALIZATION
xk = x0;
z0 = zeros(length(x0),1);
k = 0;
xseq = zeros(length(x0), kmax);
btseq = zeros(1, kmax);
pcgiterseq = zeros(1, kmax);

gradfk = gradf(xk);
gradfk_norm = norm(gradfk);

while k < kmax && gradfk_norm >= tolgrad
    [pk, cg_it, flag, cg_relres] = truncated_cg_linsys ...
        (Hessf(xk), -gradfk, z0, cg_maxit, fterms(k, gradfk));
    if flag == 1
        disp(['the cg method terminated prematuraly at itaeration ',...
            mat2str(k), ', resrel: ', mat2str(cg_relres)])
    end

    % BACKTRACK STRATEGY
    % inizialization
    alpha = 1;
    bt = 0;
    fk = f(xk);
    c1_grad_pk = c1*gradfk'*pk;

    while bt < btmax && f(xk+alpha*pk) > fk+alpha*c1_grad_pk
        alpha = rho*alpha;
        bt = bt+1;
    end

    xk = xk+alpha*pk;
    k = k+1;
    gradfk = gradf(xk);
    gradfk_norm = norm(gradfk);
    xseq(:,k) = xk;
    btseq(:,k) = bt;
    pcgiterseq(:,k) = cg_it;
end

fk = f(xk);
xseq = xseq(:,1:k);
xseq = [x0, xseq];
btseq = btseq(:,1:k);
pcgiterseq = pcgiterseq(:,1:k);

end

